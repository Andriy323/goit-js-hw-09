{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,MAAOF,SAASC,cAAc,yBAC9BE,OAAQH,SAASC,cAAc,0BAC/BG,KAAMJ,SAASC,cAAc,yBAyB/B,SAASI,EAAcC,EAAUJ,GAC/B,OAAO,IAAIK,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEF,WAAUJ,UAEpBO,EAAO,CAAEH,WAAUJ,S,GAEpBA,E,IAhCPJ,EAAKC,KAAKc,iBAAiB,UAE3B,SAAyBC,GACvBA,EAAEC,iBAIF,IAHA,IAAIC,EAAaC,OAAOnB,EAAKI,MAAMgB,OAC7BC,EAAYF,OAAOnB,EAAKM,KAAKc,OAE1BE,EAAI,EAAGA,GAAKH,OAAOnB,EAAKK,OAAOe,OAAQE,IAC9Cf,EAAce,EAAGJ,GACdK,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MACjBN,EAAA2B,OAAOC,QAAQ,uBAAwCC,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,OAC3DwB,QAAMC,IAAI,uBAAwCF,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAE3D0B,OAAM,SAAAN,G,IAAGhB,EAAQgB,EAARhB,SAAUJ,EAAKoB,EAALpB,MAClBN,EAAA2B,OAAOM,QAAQ,sBAAuCJ,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,OAC1DwB,QAAMC,IAAI,sBAAqCF,OAAfnB,EAAS,QAAYmB,OAANvB,EAAM,M,IAG3Dc,GAA0BG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delay: document.querySelector('input[name = \"delay\"]'),\n  amount: document.querySelector('input[name = \"amount\"]'),\n  step: document.querySelector('input[name = \"step\"]'),\n};\n\nrefs.form.addEventListener('submit', startNewPromise);\n\nfunction startNewPromise(e) {\n  e.preventDefault();\n  let inputDeley = Number(refs.delay.value);\n  const inputStep = Number(refs.step.value);\n\n  for (let i = 1; i <= Number(refs.amount.value); i++) {\n    createPromise(i, inputDeley)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    inputDeley = inputDeley + inputStep;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","delay","amount","step","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","inputDeley","Number","value","inputStep","i","then","param","Notify","success","concat","console","log","catch","failure"],"version":3,"file":"03-promises.96d64c13.js.map"}